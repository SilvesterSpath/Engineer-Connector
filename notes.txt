mongoURL:'mongodb+srv://swx76:<password>@engconnector.cpd1t.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'

3/1
	- for the req.body to work we have to initialize the body parses middleware in the server.js
// Init middleware for body parser
app.use(express.json({ extended: false }));

3/11
	- gravatar 8:00

3/12
	- https://github.com/auth0/node-jsonwebtoken
	- with mongoose using monogDB we don't have to use ._id only .id
3/13
	- creating custom middleware
	- in the first version of this course we used 'passport' wich is a middleware that does stuff for us, but its very heavy and made things more difficult
	- if I want to use facebook login or twitter login it would be useful
	- in the verification porcess we take the request object and assign a value to user (req.user = decoded.user)
	- just puttin the auth middleware as a second parameter (argument is the actaul value)
	- if we making a call to our database we use a try/catch blok because of the async-await
	- because we have set the req.user to the decoded user wich is the userId we simply set the .findById(req.user.id)
	- because we don't want to return the password we use .select('-password')

3/14
	- we need to be able to login with users that are already in the database
	- its similar to users register

4/15
	- making a profile model
	- in the Schema the user object is referenced to the 'user' model
	- as far as the skills: type: [String], in react this would be as a comma separated value list, and after that we will use jacascript to turn it into an array

4/16 
	- in the get current user profile route, we need to get the users id from the token and find with this token the corresponding user

4/17
	- create profile for the logged in user
	- Profile.findOne({user: req.user.id}) here 'user' is the mongoose ObjectID and the req.user.id comes from the token

4/18
	- get all profiles and get profile by id

4/19
	- delete a not just a profile but a user completely
	- because I dont need to get anything so its sufficiant without a variable...
await Profile.findOneAndRemove({user: })
	- this route is private so we should use the auth middleware

4/20
	- to add experience and education we use a 'PUT' requesr because these are separate entities
	- it could be a 'POST' requrest, but we choose 'PUT' because basically we add extra data to an existing profile
	- since we checking for error, we want to create an 'errors' variable for validationsresult(req)
	 - if errors not empty we send in json the errors object wich has an array() method wich than gives us our errors
	- because this experiences is an embedded array in mongoDB it will get a unique ID
	- this way unlike in a SQL database we shouldn't add all relations to a separate table we get the structure in one collection

4/21
	- delete experience route
4/22
	- add and delete education
4/23
	- get github repos

5/24
	- because we are logged in we get the token and inside it is the id and this is all in the 'req' body

5/27
	- likes

5/28
	- comments

6/29
	- start react
	- redux-thunk allows us to make asyncronous requests in our 'action'-s
	- moment is a date
	
6/33
	- install react router
	- change class to className, 'a' and 'href' to 'Link' and 'to'

6/34
	- implementing 'state', because each input needs to have it's own state and an onChange handler (because of controlled input)
	- we are using here html5 client side validation with the required keyword
	- whats great about the useState hook is that a state can access from anywhere

6/35
	- making the same request on the frontend side as in postman in Register.js:
	      const newUser = {
        name,
        email,
        password,
      };

      try {
        const config = {
          headers: {
            'Content-Type': 'application/json',
          },
        };
        const body = JSON.stringify(newUser);

        const res = await axios.post('/api/users', body, config); // we can do this because we added the proxy server
        console.log(res.data); // this should be the token
      } catch (error) {
        console.error(error.response.data);
      }	

7/36
	- starting with redux

7/37
	-	creating the store

7/38
	- in alert.js because state is inmutable in the return statement we need to use the spread operator
	- in alert.js we can use dispatch because of the [thunk] middleware

7/39
	- connect Register.js with the reducer with {connect}
	- in order to do this we have to export it down
	- connect takes in two things (state, {actions})
	- with connect the component should be only const 'component' and at the bottom should be export default connect()(component)
	- 'racf' is for components 'rafcp' is for components with proptypes
	- mapStateToProps does what it is called, map the required state to a usable prop to the component
	- the Alert.js component should be put in above Switch because Switch only have Routes
	- in the connect we should put mapStateToProps and if it is than an {action}